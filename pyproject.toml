[tool.poetry]
name = "bp2022-ap1"
version = "0.1.0"
description = ""
authors = [
    "Antony Kamp <antony.kamp@student.hpi.de>",
    "Max Lietze <max.lietze@student.hpi.de>",
    "Luke Ortlam <luke.ortlam@student.hpi.de>",
    "Anton Persitzky <anton.persitzky@student.hpi.de>",
    "Christian Raue <christian.raue@student.hpi.de>",
    "Lucas Reisener <lucas.reisener@student.hpi.de>"
]
readme = "README.md"
packages = [{include = "src"}]

[tool.poetry.dependencies]
python = "^3.10"
traci = "^1.16.0"
sumolib = "^1.16.0"
peewee = "^3.16.0"
peewee-migrate = "^1.6.6"
marshmallow = "^3.19.0"
psycopg2 = "^2.9.5"
interlocking = { git = "https://github.com/bp2022-ap1/interlocking.git", branch = "add-Poetry-support" }
flask = "^2.2.3"
webargs = "^8.2.0"
freezegun = "^1.2.2"
yaramo = { git = "https://github.com/bp2022-ap1/yaramo", branch = "refactor/replace-connected-nodes-with-edges" }
orm-importer = { git = "https://github.com/bp2022-ap1/orm-importer", branch = "refactor/replace-connected-nodes-edges" }
planpro-exporter = { git = "https://github.com/bp2022-ap1/planpro-exporter", branch = "refactor/replace-connected-nodes-edges" }
planpro-importer = { git = "https://github.com/bp2022-ap1/planpro-importer", branch = "refactor/replace-connected-nodes-edges" }
railway-route-generator = { git = "https://github.com/bp2022-ap1/railway-route-generator", branch = "refactor/replace-connected-nodes-edges" }
sumoexporter = { git = "https://github.com/bp2022-ap1/sumo-exporter", branch = "refactor/replace-connected-nodes-edges" }
track-signal-generator = { git = "https://github.com/bp2022-ap1/track-signal-generator.git", branch = "refactor/replace-connected-nodes-edges" }
pandas = "^2.0.0"
grafana-pandas-datasource = { git = "https://github.com/BP2022-AP1/grafana-pandas-datasource.git" }
matplotlib = "^3.7.1"
scipy = "1.9.2"
requests = "^2.28.2"
celery = "^5.2.7"

[tool.poetry.group.dev.dependencies]
pytest = "^7.2.2"
black = "^23.1.0"
isort = "^5.12.0"
pylint = "^2.17.0"
poethepoet = "^0.19.0"
pytest-cov = "^4.0.0"
python-dotenv = "^1.0.0"
redis = "^4.4.4"
waitress = "^2.1.2"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
sphinx = "6.2.0"
sphinx-book-theme = "1.0.1"
sphinxcontrib-openapi = "0.8.1"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poe.tasks]

    sleep = "sleep 5"

    [tool.poe.tasks.format-isort]
    help = "Run isort on the code base"
    cmd  = "isort ."

    [tool.poe.tasks.format-black]
    help = "Run black on the code base"
    cmd  = "black ."

    [tool.poe.tasks.format]
    help = "Run formating tools on the code base"
    sequence  = ["format-isort", "format-black"]

    [tool.poe.tasks.lint-src]
    help = "Run lint in /src directory"
    cmd  = "pylint src --rcfile ./.github/workflows/.pylintrcsrc"

    [tool.poe.tasks.lint-tests]
    help = "Run lint in /tests directory"
    cmd  = "pylint tests --rcfile ./.github/workflows/.pylintrctests"

    [tool.poe.tasks.lint]
    help = "Run lint in /src and /tests directory"
    sequence  = ["lint-src", "lint-tests"]

    [tool.poe.tasks.db-test]
    help = "Call DB utilities for test database"
    cmd = "python3 db/local/db.py"
    envfile = ".env.test"

    [tool.poe.tasks.db]
    help = "Call DB utilities for dev and prod database"
    cmd = "python3 db/local/db.py"
    envfile = [".env.shared", ".env.secret"]

    [tool.poe.tasks.test]
    help = "Run DB and test with pytest"
    sequence = ["test-deps", "test-pytest"]
    envfile = [".env.shared", ".env.test"]

    [tool.poe.tasks.test-lf]
    help = "Run DB and test with pytest (only tests that failed last time)"
    sequence = ["test-deps", "test-pytest --lf"]
    envfile = [".env.shared", ".env.test"]

    [tool.poe.tasks.test-ff]
    help = "Run DB and test with pytest (tests that failed last time first)"
    sequence = ["test-deps", "test-pytest --ff"]
    envfile = [".env.shared", ".env.test"]

    [tool.poe.tasks.test-nf]
    help = "Run DB and test with pytest (new tests first)"
    sequence = ["test-deps", "test-pytest --nf"]
    envfile = [".env.shared", ".env.test"]

    [tool.poe.tasks.test-deps]
    help = "Initializes needed components for tests"
    sequence = ["test-docker-deps", "sleep", "db-test recreate"]

    [tool.poe.tasks.test-docker-deps]
    help = "Initializes needed docker containers for tests"
    cmd = "docker compose up -d grafana-test celery-worker postgresql-test"

    [tool.poe.tasks.test-pytest]
    help = "Run test with pytest"
    cmd = "pytest --cov=src  --cov-config=.coveragerc --cov-report xml"

    [tool.poe.tasks.ci]
    help = "Run formatting, linting and testing in preparation for CI"
    sequence = ["format", "lint", "test"]

    [tool.poe.tasks.dev]
    help = "Run flask app in development mode and run db"
    cmd = "docker compose up dev"
    envfile = ".env.secret"

    [tool.poe.tasks.prod]
    help = "Run flask app in development mode and run db"
    cmd = "docker compose up prod"
    envfile = ".env.secret"

    [tool.poe.tasks.gui]
    help = "Run flask app in development mode with gui"
    sequence = ["gui-deps", "sleep", "gui-flask"]
    envfile = [".env.shared", ".env.secret"]

    [tool.poe.tasks.gui-deps]
    help = "Run database and grafana for gui"
    cmd = "docker compose up postgresql grafana-dev -d"

    [tool.poe.tasks.gui-flask]
    help = "Run flask app in development mode with gui"
    cmd = "flask -A src run --debug"
    env = { "DISABLE_CELERY" = "true" }

    [tool.poe.tasks.cov]
    help = "Run coverage report"
    cmd = "pytest --co --cov=src --cov-config=.coveragerc"

    [tool.poe.tasks.cov-xml]
    help = "Run coverage report and write to XML file"
    cmd = "pytest --co --cov=src  --cov-config=.coveragerc --cov-report xml"

    [tool.poe.tasks.docs-build]
    help = "Build the documentation with sphinx"
    cmd = "sphinx-build -b html docs/source/ docs/build/html"

    [tool.poe.tasks.docs-open]
    help = "Open the built documentation"
    cmd = "open docs/build/html/index.html"

    [tool.poe.tasks.docs]
    help = "Build and open the documentation of the REST API"
    sequence = ["docs-build", "docs-open"]

[tool.isort]
profile = "black"
